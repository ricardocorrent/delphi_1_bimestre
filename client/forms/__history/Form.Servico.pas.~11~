unit Form.Servico;

interface

uses
  Winapi.Windows, Winapi.Messages, System.SysUtils, System.Variants, System.Classes, Vcl.Graphics,
  Vcl.Controls, Vcl.Forms, Vcl.Dialogs, Vcl.ComCtrls, Vcl.StdCtrls, Vcl.Grids,
  Vcl.DBGrids, FireDAC.Stan.Intf, FireDAC.Stan.Option, FireDAC.Stan.Param,
  FireDAC.Stan.Error, FireDAC.DatS, FireDAC.Phys.Intf, FireDAC.DApt.Intf,
  FireDAC.Stan.StorageJSON, FireDAC.Stan.StorageBin, Data.DB,
  FireDAC.Comp.DataSet, FireDAC.Comp.Client, Vcl.Mask, Vcl.DBCtrls,
  Data.FireDACJSONReflect, Datasnap.DSClientRest;

type
  TfrmServico = class(TForm)
    pgcServico: TPageControl;
    tsConsulta: TTabSheet;
    tsCadastro: TTabSheet;
    grdServico: TDBGrid;
    btnNew: TButton;
    fdMemTableServico: TFDMemTable;
    dsServico: TDataSource;
    sslBin: TFDStanStorageBinLink;
    sslJson: TFDStanStorageJSONLink;
    intgrfldMemTableServicoID: TIntegerField;
    wdstrngfldMemTableServicoDESCRICAO: TWideStringField;
    fltfldMemTableServicoVALOR: TFloatField;
    lbl1: TLabel;
    edtId: TDBEdit;
    lbl2: TLabel;
    edtDescricao: TDBEdit;
    lbl3: TLabel;
    edtValor: TDBEdit;
    btnDelete: TButton;
    btnClear: TButton;
    btnSave: TButton;
    procedure btnClearClick(Sender: TObject);
    procedure btnNewClick(Sender: TObject);
  private
    { Private declarations }
  public
    { Public declarations }
    procedure initialize(AEnabled: Boolean; AFocusIndex, AActivedIndex: Integer);

    procedure GetAllServico;
    procedure ApplyUpdate;
    function DeleteServico(AId: Integer): Boolean;
    function GetDeltas: TFDJSONDeltas;
  end;

var
  frmServico: TfrmServico;

implementation

uses ClientModule, System.Generics.Collections, System.JSON;

{$R *.dfm}

procedure HandleRESTException(const AConnection: TDSRestConnection; const APrefix: string; const E: TDSRestProtocolException);
var
  LJSONValue: TJSONValue;
  LMessage: string;
  LPair: TJSONPair;
begin
  // Padronizando mensagem de erro no caso de exceção do servidor

  LJSONValue := TJSONObject.ParseJSONValue(BytesOf(E.ResponseText), 0);
  try
    LMessage :=  E.ResponseText;

    if LJSONValue is TJSONObject then
    begin
      LPair := TJSONObject(LJSONValue).Get(0);
      if LPair.JsonString.Value = 'SessionExpired' then
      begin
          AConnection.SessionID := '';
      end;

      LMessage := LPair.JSONValue.Value;
    end
  finally
    LJSONValue.Free;
  end;

  ShowMessageFmt('%s: %s', [APrefix, LMessage]);
end;
{ TfrmServico }

procedure TfrmServico.ApplyUpdate;
var
  LDeltaList: TFDJSONDeltas;
begin
  LDeltaList := GetDeltas;
  try
    ClientModule.smRestConnection.smServicoClient.ApplyChangesServico(LDeltaList);
    GetAllServico;
  except
    on E: TDSRestProtocolException do
      HandleRestException(ClientModule.smRestConnection.DSRestConnection1, 'Apply Updates error', E)
    else
      raise;
  end;
end;

procedure TfrmServico.btnClearClick(Sender: TObject);
begin
  edtDescricao.SetFocus;
  edtValor.SetFocus;
  fdMemTableServico.Insert;
end;

procedure TfrmServico.btnNewClick(Sender: TObject);
begin
  initialize(True, 1, 1);
  fdMemTableServico.Insert;
end;

function TfrmServico.DeleteServico(AId: Integer): Boolean;
begin

end;

procedure TfrmServico.GetAllServico;
begin

end;

function TfrmServico.GetDeltas: TFDJSONDeltas;
begin

end;

procedure TfrmServico.initialize(AEnabled: Boolean; AFocusIndex,
  AActivedIndex: Integer);
begin

end;

end.
